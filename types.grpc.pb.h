// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: types/types.proto
#ifndef GRPC_types_2ftypes_2eproto__INCLUDED
#define GRPC_types_2ftypes_2eproto__INCLUDED

#include "types/types.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace types {

// ----------------------------------------
// Service Definition
//
class ABCIApplication final {
 public:
  static constexpr char const* service_full_name() {
    return "types.ABCIApplication";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Echo(::grpc::ClientContext* context, const ::types::RequestEcho& request, ::types::ResponseEcho* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseEcho>> AsyncEcho(::grpc::ClientContext* context, const ::types::RequestEcho& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseEcho>>(AsyncEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseEcho>> PrepareAsyncEcho(::grpc::ClientContext* context, const ::types::RequestEcho& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseEcho>>(PrepareAsyncEchoRaw(context, request, cq));
    }
    virtual ::grpc::Status Flush(::grpc::ClientContext* context, const ::types::RequestFlush& request, ::types::ResponseFlush* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseFlush>> AsyncFlush(::grpc::ClientContext* context, const ::types::RequestFlush& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseFlush>>(AsyncFlushRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseFlush>> PrepareAsyncFlush(::grpc::ClientContext* context, const ::types::RequestFlush& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseFlush>>(PrepareAsyncFlushRaw(context, request, cq));
    }
    virtual ::grpc::Status Info(::grpc::ClientContext* context, const ::types::RequestInfo& request, ::types::ResponseInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseInfo>> AsyncInfo(::grpc::ClientContext* context, const ::types::RequestInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseInfo>>(AsyncInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseInfo>> PrepareAsyncInfo(::grpc::ClientContext* context, const ::types::RequestInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseInfo>>(PrepareAsyncInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status SetOption(::grpc::ClientContext* context, const ::types::RequestSetOption& request, ::types::ResponseSetOption* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseSetOption>> AsyncSetOption(::grpc::ClientContext* context, const ::types::RequestSetOption& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseSetOption>>(AsyncSetOptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseSetOption>> PrepareAsyncSetOption(::grpc::ClientContext* context, const ::types::RequestSetOption& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseSetOption>>(PrepareAsyncSetOptionRaw(context, request, cq));
    }
    virtual ::grpc::Status DeliverTx(::grpc::ClientContext* context, const ::types::RequestDeliverTx& request, ::types::ResponseDeliverTx* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseDeliverTx>> AsyncDeliverTx(::grpc::ClientContext* context, const ::types::RequestDeliverTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseDeliverTx>>(AsyncDeliverTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseDeliverTx>> PrepareAsyncDeliverTx(::grpc::ClientContext* context, const ::types::RequestDeliverTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseDeliverTx>>(PrepareAsyncDeliverTxRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckTx(::grpc::ClientContext* context, const ::types::RequestCheckTx& request, ::types::ResponseCheckTx* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseCheckTx>> AsyncCheckTx(::grpc::ClientContext* context, const ::types::RequestCheckTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseCheckTx>>(AsyncCheckTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseCheckTx>> PrepareAsyncCheckTx(::grpc::ClientContext* context, const ::types::RequestCheckTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseCheckTx>>(PrepareAsyncCheckTxRaw(context, request, cq));
    }
    virtual ::grpc::Status Query(::grpc::ClientContext* context, const ::types::RequestQuery& request, ::types::ResponseQuery* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseQuery>> AsyncQuery(::grpc::ClientContext* context, const ::types::RequestQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseQuery>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseQuery>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::types::RequestQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseQuery>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status Commit(::grpc::ClientContext* context, const ::types::RequestCommit& request, ::types::ResponseCommit* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseCommit>> AsyncCommit(::grpc::ClientContext* context, const ::types::RequestCommit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseCommit>>(AsyncCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseCommit>> PrepareAsyncCommit(::grpc::ClientContext* context, const ::types::RequestCommit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseCommit>>(PrepareAsyncCommitRaw(context, request, cq));
    }
    virtual ::grpc::Status InitChain(::grpc::ClientContext* context, const ::types::RequestInitChain& request, ::types::ResponseInitChain* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseInitChain>> AsyncInitChain(::grpc::ClientContext* context, const ::types::RequestInitChain& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseInitChain>>(AsyncInitChainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseInitChain>> PrepareAsyncInitChain(::grpc::ClientContext* context, const ::types::RequestInitChain& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseInitChain>>(PrepareAsyncInitChainRaw(context, request, cq));
    }
    virtual ::grpc::Status BeginBlock(::grpc::ClientContext* context, const ::types::RequestBeginBlock& request, ::types::ResponseBeginBlock* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseBeginBlock>> AsyncBeginBlock(::grpc::ClientContext* context, const ::types::RequestBeginBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseBeginBlock>>(AsyncBeginBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseBeginBlock>> PrepareAsyncBeginBlock(::grpc::ClientContext* context, const ::types::RequestBeginBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseBeginBlock>>(PrepareAsyncBeginBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status EndBlock(::grpc::ClientContext* context, const ::types::RequestEndBlock& request, ::types::ResponseEndBlock* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseEndBlock>> AsyncEndBlock(::grpc::ClientContext* context, const ::types::RequestEndBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseEndBlock>>(AsyncEndBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseEndBlock>> PrepareAsyncEndBlock(::grpc::ClientContext* context, const ::types::RequestEndBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseEndBlock>>(PrepareAsyncEndBlockRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseEcho>* AsyncEchoRaw(::grpc::ClientContext* context, const ::types::RequestEcho& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseEcho>* PrepareAsyncEchoRaw(::grpc::ClientContext* context, const ::types::RequestEcho& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseFlush>* AsyncFlushRaw(::grpc::ClientContext* context, const ::types::RequestFlush& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseFlush>* PrepareAsyncFlushRaw(::grpc::ClientContext* context, const ::types::RequestFlush& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseInfo>* AsyncInfoRaw(::grpc::ClientContext* context, const ::types::RequestInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseInfo>* PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::types::RequestInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseSetOption>* AsyncSetOptionRaw(::grpc::ClientContext* context, const ::types::RequestSetOption& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseSetOption>* PrepareAsyncSetOptionRaw(::grpc::ClientContext* context, const ::types::RequestSetOption& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseDeliverTx>* AsyncDeliverTxRaw(::grpc::ClientContext* context, const ::types::RequestDeliverTx& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseDeliverTx>* PrepareAsyncDeliverTxRaw(::grpc::ClientContext* context, const ::types::RequestDeliverTx& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseCheckTx>* AsyncCheckTxRaw(::grpc::ClientContext* context, const ::types::RequestCheckTx& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseCheckTx>* PrepareAsyncCheckTxRaw(::grpc::ClientContext* context, const ::types::RequestCheckTx& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseQuery>* AsyncQueryRaw(::grpc::ClientContext* context, const ::types::RequestQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseQuery>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::types::RequestQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseCommit>* AsyncCommitRaw(::grpc::ClientContext* context, const ::types::RequestCommit& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseCommit>* PrepareAsyncCommitRaw(::grpc::ClientContext* context, const ::types::RequestCommit& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseInitChain>* AsyncInitChainRaw(::grpc::ClientContext* context, const ::types::RequestInitChain& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseInitChain>* PrepareAsyncInitChainRaw(::grpc::ClientContext* context, const ::types::RequestInitChain& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseBeginBlock>* AsyncBeginBlockRaw(::grpc::ClientContext* context, const ::types::RequestBeginBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseBeginBlock>* PrepareAsyncBeginBlockRaw(::grpc::ClientContext* context, const ::types::RequestBeginBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseEndBlock>* AsyncEndBlockRaw(::grpc::ClientContext* context, const ::types::RequestEndBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ResponseEndBlock>* PrepareAsyncEndBlockRaw(::grpc::ClientContext* context, const ::types::RequestEndBlock& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Echo(::grpc::ClientContext* context, const ::types::RequestEcho& request, ::types::ResponseEcho* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseEcho>> AsyncEcho(::grpc::ClientContext* context, const ::types::RequestEcho& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseEcho>>(AsyncEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseEcho>> PrepareAsyncEcho(::grpc::ClientContext* context, const ::types::RequestEcho& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseEcho>>(PrepareAsyncEchoRaw(context, request, cq));
    }
    ::grpc::Status Flush(::grpc::ClientContext* context, const ::types::RequestFlush& request, ::types::ResponseFlush* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseFlush>> AsyncFlush(::grpc::ClientContext* context, const ::types::RequestFlush& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseFlush>>(AsyncFlushRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseFlush>> PrepareAsyncFlush(::grpc::ClientContext* context, const ::types::RequestFlush& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseFlush>>(PrepareAsyncFlushRaw(context, request, cq));
    }
    ::grpc::Status Info(::grpc::ClientContext* context, const ::types::RequestInfo& request, ::types::ResponseInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseInfo>> AsyncInfo(::grpc::ClientContext* context, const ::types::RequestInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseInfo>>(AsyncInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseInfo>> PrepareAsyncInfo(::grpc::ClientContext* context, const ::types::RequestInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseInfo>>(PrepareAsyncInfoRaw(context, request, cq));
    }
    ::grpc::Status SetOption(::grpc::ClientContext* context, const ::types::RequestSetOption& request, ::types::ResponseSetOption* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseSetOption>> AsyncSetOption(::grpc::ClientContext* context, const ::types::RequestSetOption& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseSetOption>>(AsyncSetOptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseSetOption>> PrepareAsyncSetOption(::grpc::ClientContext* context, const ::types::RequestSetOption& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseSetOption>>(PrepareAsyncSetOptionRaw(context, request, cq));
    }
    ::grpc::Status DeliverTx(::grpc::ClientContext* context, const ::types::RequestDeliverTx& request, ::types::ResponseDeliverTx* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseDeliverTx>> AsyncDeliverTx(::grpc::ClientContext* context, const ::types::RequestDeliverTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseDeliverTx>>(AsyncDeliverTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseDeliverTx>> PrepareAsyncDeliverTx(::grpc::ClientContext* context, const ::types::RequestDeliverTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseDeliverTx>>(PrepareAsyncDeliverTxRaw(context, request, cq));
    }
    ::grpc::Status CheckTx(::grpc::ClientContext* context, const ::types::RequestCheckTx& request, ::types::ResponseCheckTx* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseCheckTx>> AsyncCheckTx(::grpc::ClientContext* context, const ::types::RequestCheckTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseCheckTx>>(AsyncCheckTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseCheckTx>> PrepareAsyncCheckTx(::grpc::ClientContext* context, const ::types::RequestCheckTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseCheckTx>>(PrepareAsyncCheckTxRaw(context, request, cq));
    }
    ::grpc::Status Query(::grpc::ClientContext* context, const ::types::RequestQuery& request, ::types::ResponseQuery* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseQuery>> AsyncQuery(::grpc::ClientContext* context, const ::types::RequestQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseQuery>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseQuery>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::types::RequestQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseQuery>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    ::grpc::Status Commit(::grpc::ClientContext* context, const ::types::RequestCommit& request, ::types::ResponseCommit* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseCommit>> AsyncCommit(::grpc::ClientContext* context, const ::types::RequestCommit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseCommit>>(AsyncCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseCommit>> PrepareAsyncCommit(::grpc::ClientContext* context, const ::types::RequestCommit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseCommit>>(PrepareAsyncCommitRaw(context, request, cq));
    }
    ::grpc::Status InitChain(::grpc::ClientContext* context, const ::types::RequestInitChain& request, ::types::ResponseInitChain* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseInitChain>> AsyncInitChain(::grpc::ClientContext* context, const ::types::RequestInitChain& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseInitChain>>(AsyncInitChainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseInitChain>> PrepareAsyncInitChain(::grpc::ClientContext* context, const ::types::RequestInitChain& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseInitChain>>(PrepareAsyncInitChainRaw(context, request, cq));
    }
    ::grpc::Status BeginBlock(::grpc::ClientContext* context, const ::types::RequestBeginBlock& request, ::types::ResponseBeginBlock* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseBeginBlock>> AsyncBeginBlock(::grpc::ClientContext* context, const ::types::RequestBeginBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseBeginBlock>>(AsyncBeginBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseBeginBlock>> PrepareAsyncBeginBlock(::grpc::ClientContext* context, const ::types::RequestBeginBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseBeginBlock>>(PrepareAsyncBeginBlockRaw(context, request, cq));
    }
    ::grpc::Status EndBlock(::grpc::ClientContext* context, const ::types::RequestEndBlock& request, ::types::ResponseEndBlock* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseEndBlock>> AsyncEndBlock(::grpc::ClientContext* context, const ::types::RequestEndBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseEndBlock>>(AsyncEndBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseEndBlock>> PrepareAsyncEndBlock(::grpc::ClientContext* context, const ::types::RequestEndBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ResponseEndBlock>>(PrepareAsyncEndBlockRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseEcho>* AsyncEchoRaw(::grpc::ClientContext* context, const ::types::RequestEcho& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseEcho>* PrepareAsyncEchoRaw(::grpc::ClientContext* context, const ::types::RequestEcho& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseFlush>* AsyncFlushRaw(::grpc::ClientContext* context, const ::types::RequestFlush& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseFlush>* PrepareAsyncFlushRaw(::grpc::ClientContext* context, const ::types::RequestFlush& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseInfo>* AsyncInfoRaw(::grpc::ClientContext* context, const ::types::RequestInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseInfo>* PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::types::RequestInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseSetOption>* AsyncSetOptionRaw(::grpc::ClientContext* context, const ::types::RequestSetOption& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseSetOption>* PrepareAsyncSetOptionRaw(::grpc::ClientContext* context, const ::types::RequestSetOption& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseDeliverTx>* AsyncDeliverTxRaw(::grpc::ClientContext* context, const ::types::RequestDeliverTx& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseDeliverTx>* PrepareAsyncDeliverTxRaw(::grpc::ClientContext* context, const ::types::RequestDeliverTx& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseCheckTx>* AsyncCheckTxRaw(::grpc::ClientContext* context, const ::types::RequestCheckTx& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseCheckTx>* PrepareAsyncCheckTxRaw(::grpc::ClientContext* context, const ::types::RequestCheckTx& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseQuery>* AsyncQueryRaw(::grpc::ClientContext* context, const ::types::RequestQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseQuery>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::types::RequestQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseCommit>* AsyncCommitRaw(::grpc::ClientContext* context, const ::types::RequestCommit& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseCommit>* PrepareAsyncCommitRaw(::grpc::ClientContext* context, const ::types::RequestCommit& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseInitChain>* AsyncInitChainRaw(::grpc::ClientContext* context, const ::types::RequestInitChain& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseInitChain>* PrepareAsyncInitChainRaw(::grpc::ClientContext* context, const ::types::RequestInitChain& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseBeginBlock>* AsyncBeginBlockRaw(::grpc::ClientContext* context, const ::types::RequestBeginBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseBeginBlock>* PrepareAsyncBeginBlockRaw(::grpc::ClientContext* context, const ::types::RequestBeginBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseEndBlock>* AsyncEndBlockRaw(::grpc::ClientContext* context, const ::types::RequestEndBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ResponseEndBlock>* PrepareAsyncEndBlockRaw(::grpc::ClientContext* context, const ::types::RequestEndBlock& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Echo_;
    const ::grpc::internal::RpcMethod rpcmethod_Flush_;
    const ::grpc::internal::RpcMethod rpcmethod_Info_;
    const ::grpc::internal::RpcMethod rpcmethod_SetOption_;
    const ::grpc::internal::RpcMethod rpcmethod_DeliverTx_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckTx_;
    const ::grpc::internal::RpcMethod rpcmethod_Query_;
    const ::grpc::internal::RpcMethod rpcmethod_Commit_;
    const ::grpc::internal::RpcMethod rpcmethod_InitChain_;
    const ::grpc::internal::RpcMethod rpcmethod_BeginBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_EndBlock_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Echo(::grpc::ServerContext* context, const ::types::RequestEcho* request, ::types::ResponseEcho* response);
    virtual ::grpc::Status Flush(::grpc::ServerContext* context, const ::types::RequestFlush* request, ::types::ResponseFlush* response);
    virtual ::grpc::Status Info(::grpc::ServerContext* context, const ::types::RequestInfo* request, ::types::ResponseInfo* response);
    virtual ::grpc::Status SetOption(::grpc::ServerContext* context, const ::types::RequestSetOption* request, ::types::ResponseSetOption* response);
    virtual ::grpc::Status DeliverTx(::grpc::ServerContext* context, const ::types::RequestDeliverTx* request, ::types::ResponseDeliverTx* response);
    virtual ::grpc::Status CheckTx(::grpc::ServerContext* context, const ::types::RequestCheckTx* request, ::types::ResponseCheckTx* response);
    virtual ::grpc::Status Query(::grpc::ServerContext* context, const ::types::RequestQuery* request, ::types::ResponseQuery* response);
    virtual ::grpc::Status Commit(::grpc::ServerContext* context, const ::types::RequestCommit* request, ::types::ResponseCommit* response);
    virtual ::grpc::Status InitChain(::grpc::ServerContext* context, const ::types::RequestInitChain* request, ::types::ResponseInitChain* response);
    virtual ::grpc::Status BeginBlock(::grpc::ServerContext* context, const ::types::RequestBeginBlock* request, ::types::ResponseBeginBlock* response);
    virtual ::grpc::Status EndBlock(::grpc::ServerContext* context, const ::types::RequestEndBlock* request, ::types::ResponseEndBlock* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Echo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* context, const ::types::RequestEcho* request, ::types::ResponseEcho* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEcho(::grpc::ServerContext* context, ::types::RequestEcho* request, ::grpc::ServerAsyncResponseWriter< ::types::ResponseEcho>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Flush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Flush() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Flush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Flush(::grpc::ServerContext* context, const ::types::RequestFlush* request, ::types::ResponseFlush* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFlush(::grpc::ServerContext* context, ::types::RequestFlush* request, ::grpc::ServerAsyncResponseWriter< ::types::ResponseFlush>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Info() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* context, const ::types::RequestInfo* request, ::types::ResponseInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfo(::grpc::ServerContext* context, ::types::RequestInfo* request, ::grpc::ServerAsyncResponseWriter< ::types::ResponseInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetOption : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetOption() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetOption() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOption(::grpc::ServerContext* context, const ::types::RequestSetOption* request, ::types::ResponseSetOption* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetOption(::grpc::ServerContext* context, ::types::RequestSetOption* request, ::grpc::ServerAsyncResponseWriter< ::types::ResponseSetOption>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeliverTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeliverTx() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeliverTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeliverTx(::grpc::ServerContext* context, const ::types::RequestDeliverTx* request, ::types::ResponseDeliverTx* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeliverTx(::grpc::ServerContext* context, ::types::RequestDeliverTx* request, ::grpc::ServerAsyncResponseWriter< ::types::ResponseDeliverTx>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckTx() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CheckTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckTx(::grpc::ServerContext* context, const ::types::RequestCheckTx* request, ::types::ResponseCheckTx* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckTx(::grpc::ServerContext* context, ::types::RequestCheckTx* request, ::grpc::ServerAsyncResponseWriter< ::types::ResponseCheckTx>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Query() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::types::RequestQuery* request, ::types::ResponseQuery* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::types::RequestQuery* request, ::grpc::ServerAsyncResponseWriter< ::types::ResponseQuery>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Commit() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* context, const ::types::RequestCommit* request, ::types::ResponseCommit* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommit(::grpc::ServerContext* context, ::types::RequestCommit* request, ::grpc::ServerAsyncResponseWriter< ::types::ResponseCommit>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InitChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_InitChain() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_InitChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitChain(::grpc::ServerContext* context, const ::types::RequestInitChain* request, ::types::ResponseInitChain* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitChain(::grpc::ServerContext* context, ::types::RequestInitChain* request, ::grpc::ServerAsyncResponseWriter< ::types::ResponseInitChain>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BeginBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BeginBlock() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_BeginBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginBlock(::grpc::ServerContext* context, const ::types::RequestBeginBlock* request, ::types::ResponseBeginBlock* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginBlock(::grpc::ServerContext* context, ::types::RequestBeginBlock* request, ::grpc::ServerAsyncResponseWriter< ::types::ResponseBeginBlock>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EndBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EndBlock() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_EndBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndBlock(::grpc::ServerContext* context, const ::types::RequestEndBlock* request, ::types::ResponseEndBlock* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndBlock(::grpc::ServerContext* context, ::types::RequestEndBlock* request, ::grpc::ServerAsyncResponseWriter< ::types::ResponseEndBlock>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Echo<WithAsyncMethod_Flush<WithAsyncMethod_Info<WithAsyncMethod_SetOption<WithAsyncMethod_DeliverTx<WithAsyncMethod_CheckTx<WithAsyncMethod_Query<WithAsyncMethod_Commit<WithAsyncMethod_InitChain<WithAsyncMethod_BeginBlock<WithAsyncMethod_EndBlock<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Echo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* context, const ::types::RequestEcho* request, ::types::ResponseEcho* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Flush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Flush() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Flush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Flush(::grpc::ServerContext* context, const ::types::RequestFlush* request, ::types::ResponseFlush* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Info() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* context, const ::types::RequestInfo* request, ::types::ResponseInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetOption : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetOption() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetOption() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOption(::grpc::ServerContext* context, const ::types::RequestSetOption* request, ::types::ResponseSetOption* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeliverTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeliverTx() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeliverTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeliverTx(::grpc::ServerContext* context, const ::types::RequestDeliverTx* request, ::types::ResponseDeliverTx* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckTx() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CheckTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckTx(::grpc::ServerContext* context, const ::types::RequestCheckTx* request, ::types::ResponseCheckTx* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Query() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::types::RequestQuery* request, ::types::ResponseQuery* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Commit() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* context, const ::types::RequestCommit* request, ::types::ResponseCommit* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InitChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_InitChain() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_InitChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitChain(::grpc::ServerContext* context, const ::types::RequestInitChain* request, ::types::ResponseInitChain* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BeginBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BeginBlock() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_BeginBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginBlock(::grpc::ServerContext* context, const ::types::RequestBeginBlock* request, ::types::ResponseBeginBlock* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EndBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EndBlock() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_EndBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndBlock(::grpc::ServerContext* context, const ::types::RequestEndBlock* request, ::types::ResponseEndBlock* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Echo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::types::RequestEcho, ::types::ResponseEcho>(std::bind(&WithStreamedUnaryMethod_Echo<BaseClass>::StreamedEcho, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Echo(::grpc::ServerContext* context, const ::types::RequestEcho* request, ::types::ResponseEcho* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEcho(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::types::RequestEcho,::types::ResponseEcho>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Flush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Flush() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::types::RequestFlush, ::types::ResponseFlush>(std::bind(&WithStreamedUnaryMethod_Flush<BaseClass>::StreamedFlush, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Flush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Flush(::grpc::ServerContext* context, const ::types::RequestFlush* request, ::types::ResponseFlush* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFlush(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::types::RequestFlush,::types::ResponseFlush>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Info() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::types::RequestInfo, ::types::ResponseInfo>(std::bind(&WithStreamedUnaryMethod_Info<BaseClass>::StreamedInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Info(::grpc::ServerContext* context, const ::types::RequestInfo* request, ::types::ResponseInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::types::RequestInfo,::types::ResponseInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetOption : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetOption() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::types::RequestSetOption, ::types::ResponseSetOption>(std::bind(&WithStreamedUnaryMethod_SetOption<BaseClass>::StreamedSetOption, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetOption() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetOption(::grpc::ServerContext* context, const ::types::RequestSetOption* request, ::types::ResponseSetOption* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetOption(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::types::RequestSetOption,::types::ResponseSetOption>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeliverTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeliverTx() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::types::RequestDeliverTx, ::types::ResponseDeliverTx>(std::bind(&WithStreamedUnaryMethod_DeliverTx<BaseClass>::StreamedDeliverTx, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeliverTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeliverTx(::grpc::ServerContext* context, const ::types::RequestDeliverTx* request, ::types::ResponseDeliverTx* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeliverTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::types::RequestDeliverTx,::types::ResponseDeliverTx>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckTx() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::types::RequestCheckTx, ::types::ResponseCheckTx>(std::bind(&WithStreamedUnaryMethod_CheckTx<BaseClass>::StreamedCheckTx, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckTx(::grpc::ServerContext* context, const ::types::RequestCheckTx* request, ::types::ResponseCheckTx* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::types::RequestCheckTx,::types::ResponseCheckTx>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Query() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::types::RequestQuery, ::types::ResponseQuery>(std::bind(&WithStreamedUnaryMethod_Query<BaseClass>::StreamedQuery, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::types::RequestQuery* request, ::types::ResponseQuery* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::types::RequestQuery,::types::ResponseQuery>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Commit() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::types::RequestCommit, ::types::ResponseCommit>(std::bind(&WithStreamedUnaryMethod_Commit<BaseClass>::StreamedCommit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Commit(::grpc::ServerContext* context, const ::types::RequestCommit* request, ::types::ResponseCommit* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCommit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::types::RequestCommit,::types::ResponseCommit>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InitChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_InitChain() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::types::RequestInitChain, ::types::ResponseInitChain>(std::bind(&WithStreamedUnaryMethod_InitChain<BaseClass>::StreamedInitChain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InitChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InitChain(::grpc::ServerContext* context, const ::types::RequestInitChain* request, ::types::ResponseInitChain* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitChain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::types::RequestInitChain,::types::ResponseInitChain>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BeginBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BeginBlock() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::types::RequestBeginBlock, ::types::ResponseBeginBlock>(std::bind(&WithStreamedUnaryMethod_BeginBlock<BaseClass>::StreamedBeginBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BeginBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BeginBlock(::grpc::ServerContext* context, const ::types::RequestBeginBlock* request, ::types::ResponseBeginBlock* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBeginBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::types::RequestBeginBlock,::types::ResponseBeginBlock>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EndBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_EndBlock() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::types::RequestEndBlock, ::types::ResponseEndBlock>(std::bind(&WithStreamedUnaryMethod_EndBlock<BaseClass>::StreamedEndBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_EndBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EndBlock(::grpc::ServerContext* context, const ::types::RequestEndBlock* request, ::types::ResponseEndBlock* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEndBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::types::RequestEndBlock,::types::ResponseEndBlock>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Echo<WithStreamedUnaryMethod_Flush<WithStreamedUnaryMethod_Info<WithStreamedUnaryMethod_SetOption<WithStreamedUnaryMethod_DeliverTx<WithStreamedUnaryMethod_CheckTx<WithStreamedUnaryMethod_Query<WithStreamedUnaryMethod_Commit<WithStreamedUnaryMethod_InitChain<WithStreamedUnaryMethod_BeginBlock<WithStreamedUnaryMethod_EndBlock<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Echo<WithStreamedUnaryMethod_Flush<WithStreamedUnaryMethod_Info<WithStreamedUnaryMethod_SetOption<WithStreamedUnaryMethod_DeliverTx<WithStreamedUnaryMethod_CheckTx<WithStreamedUnaryMethod_Query<WithStreamedUnaryMethod_Commit<WithStreamedUnaryMethod_InitChain<WithStreamedUnaryMethod_BeginBlock<WithStreamedUnaryMethod_EndBlock<Service > > > > > > > > > > > StreamedService;
};

}  // namespace types


#endif  // GRPC_types_2ftypes_2eproto__INCLUDED
